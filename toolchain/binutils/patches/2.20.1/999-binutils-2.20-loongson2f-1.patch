## binutils-2.18.50-loongson-2f-3.patch
##
## DP: Author: Fuxin Zhang <zhangfx@lemote.com>
## DP: Upstream status: liu shiwei<liushiwei@gmail.com>
## DP: Description: loongson2f amd5536 patch on mipsel.
## DP: Description: http://www.zdbr.net.cn/download/patch_and_config-2.0-pre2.tar.bz2
## DP: Description: loongson2f and amd5536 patch on mipsel.
## DP: Description: 修改binutils在jr/jalr前把指令地址限制到一定范围
## DP: Description: (&= 0xffffffffcfffffff，保证一定不会出现 bfd0xxxx从而避免发出非预期IO南桥挂掉)
## From c4431a05f60b860fd5fca7866ea35502f8b16da7 Mon Sep 17 00:00:00 2001
## From: Wu Zhangjin <wuzhangjin@gmail.com>
## Date: Fri, 31 Jul 2009 16:17:47 +0800
## Subject: [PATCH] [loongson] Eliminate instruction fetch from outside 256M region
diff -Nur binutils-2.20.orig/gas/config/tc-mips.c binutils-2.20/gas/config/tc-mips.c
--- binutils-2.20.orig/gas/config/tc-mips.c	2009-09-22 23:41:00.000000000 +0800
+++ binutils-2.20/gas/config/tc-mips.c	2010-02-03 22:11:36.000000000 +0800
@@ -775,6 +775,9 @@
 /* ...likewise -mfix-24k.  */
 static int mips_fix_24k;
 
+/* True if -mfix-ls2f-kernel.  */
+static int mips_fix_ls2f_kernel;
+
 /* We don't relax branches by default, since this causes us to expand
    `la .l2 - .l1' if there's a branch between .l1 and .l2, because we
    fail to compute the offset before expanding the macro to the most
@@ -3926,6 +3929,27 @@
 }
 
 /*
+ * Eliminate instruction fetch from outside 256M region.
+ * jr target pc &= 'hffff_ffff_cfff_ffff
+ * FOR KERNEL ONLY
+ */
+static void
+macro_build_jrpatch (expressionS *ex, unsigned int sreg)
+{
+  if (mips_fix_ls2f_kernel && sreg != 26 && sreg != 27 && sreg != AT) {
+    int oldat=mips_opts.at;
+    mips_opts.at=1;
+    ex->X_op = O_constant;
+    ex->X_add_number = 0xcfff0000;
+    macro_build (ex, "lui", "t,u", AT, BFD_RELOC_HI16);
+    ex->X_add_number = 0xffff;
+    macro_build (ex, "ori", "t,r,i", AT, AT, BFD_RELOC_LO16);
+    macro_build (NULL, "and", "d,v,t", sreg, sreg, AT);
+    mips_opts.at=oldat;
+  } 
+}
+
+/*
  * Generate a "jalr" instruction with a relocation hint to the called
  * function.  This occurs in NewABI PIC code.
  */
@@ -3939,6 +3963,7 @@
       frag_grow (8);
       f = frag_more (0);
     }
+  macro_build_jrpatch (ep, PIC_CALL_REG);
   macro_build (NULL, "jalr", "d,s", RA, PIC_CALL_REG);
   if (MIPS_JALR_HINT_P (ep))
     fix_new_exp (frag_now, f - frag_now->fr_literal,
@@ -6121,6 +6146,26 @@
       /* AT is not used, just return */
       return;
 
+    case M_JR_S:
+	macro_build_jrpatch (&expr1, sreg);	
+        macro_build (NULL, "jr", "s", sreg);
+    	break;
+
+    case M_J_S:
+	macro_build_jrpatch (&expr1, sreg);	
+	macro_build (NULL, "j", "s", sreg);
+    	break; 
+
+    case M_JALR_S:
+	macro_build_jrpatch (&expr1, sreg);	
+	macro_build (NULL, "jalr", "s", sreg);
+    	break;
+
+    case M_JALR_DS:
+	macro_build_jrpatch (&expr1, sreg);	
+        macro_build (NULL, "jalr", "d,s", dreg, sreg);
+    	break;
+
     case M_J_A:
       /* The j instruction may not be used in PIC code, since it
 	 requires an absolute address.  We convert it to a b
@@ -6139,12 +6184,16 @@
       /* Fall through.  */
     case M_JAL_2:
       if (mips_pic == NO_PIC)
-	macro_build (NULL, "jalr", "d,s", dreg, sreg);
+ 	{
+ 	  macro_build_jrpatch (&expr1, sreg);	
+ 	  macro_build (NULL, "jalr", "d,s", dreg, sreg);
+ 	}
       else
 	{
 	  if (sreg != PIC_CALL_REG)
 	    as_warn (_("MIPS PIC call to register other than $25"));
 
+ 	  macro_build_jrpatch (&expr1, sreg);	
 	  macro_build (NULL, "jalr", "d,s", dreg, sreg);
 	  if (mips_pic == SVR4_PIC && !HAVE_NEWABI)
 	    {
@@ -11224,6 +11273,7 @@
     OPTION_NO_FIX_VR4120,
     OPTION_FIX_VR4130,
     OPTION_NO_FIX_VR4130,
+    OPTION_FIX_LS2F_KERNEL,
     OPTION_TRAP,
     OPTION_BREAK,
     OPTION_EB,
@@ -11314,6 +11364,7 @@
   {"mno-fix-vr4130", no_argument, NULL, OPTION_NO_FIX_VR4130},
   {"mfix-24k",    no_argument, NULL, OPTION_FIX_24K},
   {"mno-fix-24k", no_argument, NULL, OPTION_NO_FIX_24K},
+  {"mfix-ls2f-kernel", no_argument, NULL, OPTION_FIX_LS2F_KERNEL},
 
   /* Miscellaneous options.  */
   {"trap", no_argument, NULL, OPTION_TRAP},
@@ -11591,6 +11642,10 @@
       mips_fix_vr4130 = 0;
       break;
 
+    case OPTION_FIX_LS2F_KERNEL:
+      mips_fix_ls2f_kernel = 1;
+      break;
+
     case OPTION_RELAX_BRANCH:
       mips_relax_branch = 1;
       break;
diff -Nur binutils-2.20.orig/include/opcode/mips.h binutils-2.20/include/opcode/mips.h
--- binutils-2.20.orig/include/opcode/mips.h	2009-09-02 15:21:40.000000000 +0800
+++ binutils-2.20/include/opcode/mips.h	2010-02-03 22:07:22.000000000 +0800
@@ -766,7 +766,11 @@
   M_DSUB_I,
   M_DSUBU_I,
   M_DSUBU_I_2,
+  M_JR_S,
+  M_J_S, /*JCX*/
   M_J_A,
+  M_JALR_S,
+  M_JALR_DS,
   M_JAL_1,
   M_JAL_2,
   M_JAL_A,
diff -Nur binutils-2.20.orig/opcodes/mips-opc.c binutils-2.20/opcodes/mips-opc.c
--- binutils-2.20.orig/opcodes/mips-opc.c	2009-09-02 15:20:30.000000000 +0800
+++ binutils-2.20/opcodes/mips-opc.c	2010-02-03 22:07:22.000000000 +0800
@@ -187,7 +187,7 @@
 /* name,    args,	match,	    mask,	pinfo,          	pinfo2,		membership */
 {"pref",    "k,o(b)",   0xcc000000, 0xfc000000, RD_b,           	0,		I4_32|G3	},
 {"prefx",   "h,t(b)",	0x4c00000f, 0xfc0007ff, RD_b|RD_t|FP_S,		0,		I4_33	},
-{"nop",     "",         0x00000000, 0xffffffff, 0,              	INSN2_ALIAS,	I1      }, /* sll */
+{"nop",     "",         0x00020021, 0xffffffff, 0,              	INSN2_ALIAS,	I1      }, /* sll */
 {"ssnop",   "",         0x00000040, 0xffffffff, 0,              	INSN2_ALIAS,	I32|N55	}, /* sll */
 {"ehb",     "",         0x000000c0, 0xffffffff, 0,              	INSN2_ALIAS,	I33	}, /* sll */
 {"li",      "t,j",      0x24000000, 0xffe00000, WR_t,			INSN2_ALIAS,	I1	}, /* addiu */
@@ -712,10 +712,12 @@
 {"floor.w.s", "D,S",	0x4600000f, 0xffff003f, WR_D|RD_S|FP_S,		0,		I2	},
 {"hibernate","",        0x42000023, 0xffffffff,	0, 			0,		V1	},
 {"ins",     "t,r,+A,+B", 0x7c000004, 0xfc00003f, WR_t|RD_s,    		0,		I33	},
+{"jr",      "s",	0,     (int) M_JR_S,	INSN_MACRO,		0,		IL2F	},
 {"jr",      "s",	0x00000008, 0xfc1fffff,	UBD|RD_s,		0,		I1	},
 /* jr.hb is officially MIPS{32,64}R2, but it works on R1 as jr with
    the same hazard barrier effect.  */
 {"jr.hb",   "s",	0x00000408, 0xfc1fffff,	UBD|RD_s,		0,		I32	},
+{"j",       "s",	0,     (int) M_J_S,	INSN_MACRO,		0,		IL2F	}, /* jcx */
 {"j",       "s",	0x00000008, 0xfc1fffff,	UBD|RD_s,		0,		I1	}, /* jr */
 /* SVR4 PIC code requires special handling for j, so it must be a
    macro.  */
@@ -724,7 +726,9 @@
    assembler, but will never match user input (because the line above
    will match first).  */
 {"j",       "a",	0x08000000, 0xfc000000,	UBD,			0,		I1	},
+{"jalr",    "s",	0,     (int) M_JALR_S,	INSN_MACRO,		0,		IL2F	},
 {"jalr",    "s",	0x0000f809, 0xfc1fffff,	UBD|RD_s|WR_d,		0,		I1	},
+{"jalr",    "d,s",	0,     (int) M_JALR_DS,	INSN_MACRO,		0,		IL2F	},
 {"jalr",    "d,s",	0x00000009, 0xfc1f07ff,	UBD|RD_s|WR_d,		0,		I1	},
 /* jalr.hb is officially MIPS{32,64}R2, but it works on R1 as jalr
    with the same hazard barrier effect.  */
